{"version":3,"sources":["scenes/GameScene.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAeA","file":"GameScene.b262500e.js","sourceRoot":"..","sourcesContent":["/*import {LoadScene} from \"./scenes/LoadScene\";\r\nimport {MenuScene} from \"./scenes/MenuScene\";\r\nvar game;\r\nfunction GameScene(){\r\n\t//game = new Phaser.Game(config);\r\n\talert();\r\n\tgame = new Phaser.Game({\r\n\t\twidth: 100,\r\n\t\thieght: 100,\r\n\t\tscene: [\r\n\t\t\tLoadScene, MenuScene\r\n\t\t]\r\n\t});\r\n\treturn game;\r\n}*/\r\n/*\r\nclass ObjectEntity {\r\n    height: number;\r\n    name: string;\r\n    properties: any;\r\n    rectange: boolean;\r\n    rotation: number;\r\n    type: string;\r\n    visible: boolean;\r\n    width: number;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\n\r\n    game: Phaser.Game;\r\n    map: Phaser.Tilemap;\r\n    layer: Phaser.TilemapLayer;\r\n    player: Phaser.Sprite;\r\n    winZone: Phaser.Rectangle;\r\n\r\n    constructor() {\r\n        this.game = new Phaser.Game(640, 480, Phaser.AUTO, 'content', {\r\n            create: this.create, preload:\r\n            this.preload, update: this.update, render: this.render\r\n        });\r\n    }\r\n    preload() {\r\n        this.game.load.tilemap(\"ItsTheMap\", \"testmap2.json\", null, Phaser.Tilemap.TILED_JSON);\r\n        var img = this.game.load.image(\"sheet1\", \"sheet1.png\");\r\n        this.game.load.image(\"dude\", \"assets/dude.png\");\r\n    }\r\n    update() {\r\n\r\n        if (this.winZone.contains(this.player.x + this.player.width/2,this.player.y + this.player.height/2))\r\n            alert(\"You Win!\");\r\n\r\n    }\r\n    render() {\r\n    }\r\n    create() {\r\n        this.map = this.game.add.tilemap(\"ItsTheMap\", 32, 32, 100, 100);\r\n        this.map.addTilesetImage(\"sheet1\",\"sheet1.png\");\r\n\r\n        this.map.createLayer(\"Background\").resizeWorld();\r\n\r\n        this.player = new Phaser.Sprite(this.game, 0, 0, \"dude\");\r\n        this.player.width = 64;\r\n        this.player.height = 64;\r\n        this.game.world.addAt(this.player, 1);\r\n\r\n        this.game.camera.follow(this.player);\r\n\r\n        var something = this.map.objects[\"GameObjects\"][0];\r\n        var start = <ObjectEntity>this.map.objects[\"GameObjects\"][0];\r\n        var end = <ObjectEntity>this.map.objects[\"GameObjects\"][1];\r\n\r\n\r\n        this.winZone = new Phaser.Rectangle(end.x, end.y, end.width, end.height);\r\n\r\n        this.player.position.set(start.x, start.y);\r\n\r\n        this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onUp.add(() => {\r\n            this.player.position.add(-32, 0);\r\n        });\r\n\r\n        this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onUp.add(() => {\r\n            this.player.position.add(32, 0);\r\n        });\r\n\r\n        this.game.input.keyboard.addKey(Phaser.Keyboard.UP).onUp.add(() => {\r\n            this.player.position.add(0,-32);\r\n        });\r\n\r\n        this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN).onUp.add(() => {\r\n            this.player.position.add(0, 32);\r\n        });\r\n    }\r\n\r\n\r\n// Contains the configuration properties of the game\r\n// The 'parent' tag ties the game to the div with an ID of 'my-canvas' on the page\r\n// Width and Hieght are set to be scales of a 16:9 aspect ratio\r\n\r\nvar config = {\r\n\ttype: Phaser.AUTO,\r\n\twidth: 1200,\r\n\theight: 675,\r\n\tparent: 'my-canvas',\r\n\tphysics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n            gravity: { y: 300 },\r\n            debug: false\r\n        }\r\n    },\r\n\tscene: {\r\n\t\tpreload: preload,\r\n\t\tcreate: create,\r\n\t\tupdate: update\r\n\t}\r\n};\r\n\r\nvar player;\r\nvar stars;\r\nvar bombs;\r\nvar platforms;\r\nvar cursors;\r\nvar score = 0;\r\nvar gameOver = false;\r\nvar scoreText;\r\nvar game;\r\n\r\n\r\n\r\nfunction preload ()\r\n{\r\n    this.load.image('sky', 'assets/sky.png');\r\n    this.load.image('ground', 'assets/platform.png');\r\n    this.load.image('star', 'assets/star.png');\r\n    this.load.image('bomb', 'assets/bomb.png');\r\n    this.load.spritesheet('dude', 'assets/dude.png', { frameWidth: 32, frameHeight: 48 });\r\n}\r\n\r\nfunction create ()\r\n{\t\r\n\t//  A simple background for our game\r\n    this.add.image(400, 300, 'sky');\r\n\r\n    //  The platforms group contains the ground and the 2 ledges we can jump on\r\n    platforms = this.physics.add.staticGroup();\r\n\r\n    //  Here we create the ground.\r\n    //  Scale it to fit the width of the game (the original sprite is 400x32 in size)\r\n    platforms.create(400, 568, 'ground').setScale(2).refreshBody();\r\n\r\n    //  Now let's create some ledges\r\n    platforms.create(600, 400, 'ground');\r\n    platforms.create(50, 250, 'ground');\r\n    platforms.create(750, 220, 'ground');\r\n\r\n    // The player and its settings\r\n    player = this.physics.add.sprite(100, 450, 'dude');\r\n\r\n    //  Player physics properties. Give the little guy a slight bounce.\r\n    player.setBounce(0.2);\r\n    player.setCollideWorldBounds(true);\r\n\r\n    //  Our player animations, turning, walking left and walking right.\r\n    this.anims.create({\r\n        key: 'left',\r\n        frames: this.anims.generateFrameNumbers('dude', { start: 0, end: 3 }),\r\n        frameRate: 10,\r\n        repeat: -1\r\n    });\r\n\r\n    this.anims.create({\r\n        key: 'turn',\r\n        frames: [ { key: 'dude', frame: 4 } ],\r\n        frameRate: 20\r\n    });\r\n\r\n    this.anims.create({\r\n        key: 'right',\r\n        frames: this.anims.generateFrameNumbers('dude', { start: 5, end: 8 }),\r\n        frameRate: 10,\r\n        repeat: -1\r\n    });\r\n\r\n    //  Input Events\r\n    cursors = this.input.keyboard.createCursorKeys();\r\n\t\r\n    //  Some stars to collect, 12 in total, evenly spaced 70 pixels apart along the x axis\r\n    stars = this.physics.add.group({\r\n        key: 'star',\r\n        repeat: 11,\r\n        setXY: { x: 12, y: 0, stepX: 70 }\r\n    });\r\n\r\n    stars.children.iterate(function (child) {\r\n\r\n        //  Give each star a slightly different bounce\r\n        child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));\r\n\r\n    });\r\n\r\n    bombs = this.physics.add.group();\r\n\r\n    //  The score\r\n    scoreText = this.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });\r\n\r\n    //  Collide the player and the stars with the platforms\r\n    this.physics.add.collider(player, platforms);\r\n    this.physics.add.collider(stars, platforms);\r\n    this.physics.add.collider(bombs, platforms);\r\n\r\n    //  Checks to see if the player overlaps with any of the stars, if he does call the collectStar function\r\n    this.physics.add.overlap(player, stars, collectStar, null, this);\r\n\r\n    this.physics.add.collider(player, bombs, hitBomb, null, this);\r\n\t//keyObj.on('down', function(event) {  });\r\n}\r\n\r\nfunction update ()\r\n{\r\n    if (gameOver)\r\n    {\r\n        return;\r\n    }\r\n    if (cursors.left.isDown)\r\n    {\r\n        player.setVelocityX(-160);\r\n\r\n        player.anims.play('left', true);\r\n    }\r\n    else if (cursors.right.isDown)\r\n    {\r\n        player.setVelocityX(160);\r\n\r\n        player.anims.play('right', true);\r\n    }\r\n    else\r\n    {\r\n        player.setVelocityX(0);\r\n\r\n        player.anims.play('turn');\r\n    }\r\n\r\n    if (cursors.up.isDown && player.body.touching.down)\r\n    {\r\n        player.setVelocityY(-330);\r\n    }\r\n}\r\n\r\nfunction collectStar (player, star)\r\n{\r\n    star.disableBody(true, true);\r\n\r\n    //  Add and update the score\r\n    score += 10;\r\n    scoreText.setText('Score: ' + score);\r\n\r\n    if (stars.countActive(true) === 0)\r\n    {\r\n        //  A new batch of stars to collect\r\n        stars.children.iterate(function (child) {\r\n\r\n            child.enableBody(true, child.x, 0, true, true);\r\n\r\n        });\r\n\r\n        var x = (player.x < 400) ? Phaser.Math.Between(400, 800) : Phaser.Math.Between(0, 400);\r\n\r\n        var bomb = bombs.create(x, 16, 'bomb');\r\n        bomb.setBounce(1);\r\n        bomb.setCollideWorldBounds(true);\r\n        bomb.setVelocity(Phaser.Math.Between(-200, 200), 20);\r\n        bomb.allowGravity = false;\r\n\r\n    }\r\n}\r\n\r\nfunction hitBomb (player, bomb)\r\n{\r\n    this.physics.pause();\r\n\r\n    player.setTint(0xff0000);\r\n\r\n    player.anims.play('turn');\r\n\r\n    gameOver = true;\r\n}*/"]}